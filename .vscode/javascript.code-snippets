{
    "getset": {
        "prefix": [
            "getset",
        ],
        "body": [
            "on_$1 = new Set()",
            "#$1 = $2",
            "get $1() { return this.#$1 }",
            "set $1(a) {",
            "    if (this.#$1 !== a",
            "       $3",
            "    ) {",
            "        this.#$1 = a",
            "        cbH(this.on_$1)",
            "    }",
            "}",
            "",
        ],
        "description": "Get Set"
    },
    "getsetCb": {
        "prefix": [
            "getsetCb",
        ],
        "body": [
            "let $1 = $0",
            "const $1Cb = new Set()",
            "get $1Cb() { return $1Cb }, get $1() { return $1 }, set $1(a) { $1 = a; for (const f of $1Cb) if (f() === true) $1Cb.delete(f) },",
        ],
        "description": "Get Set Cb"
    },
    "returnpro": {
        "prefix": [
            "returnpro",
        ],
        "body": [
            "return new Promise((resolve, reject) => {"
        ],
        "description": "Get Set"
    },
    "defProp": {
        "prefix": [
            "defProp",
        ],
        "body": [
            "let $1 = $2",
            "this.$1Cb = new Set()",
            "Object.defineProperty(this, '$1', {",
            "   get: () => { return $1 },",
            "   set: (a) => {",
            "       $1 = a",
            "       cbH(this.$1Cb)",
            "     }",
            "   })",
            "$0"
        ],
        "description": "def prop"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (let i = 0; i < $1; i++) {",
            "    $0",
            "}",
        ],
        "description": "for"
    },
    "keydown": {
        "prefix": "keydown",
        "body": [
            "window.addEventListener('keydown', (e) => {",
            "    switch (e.key) {",
            "        case 'o':",
            "            $0",
            "            break",
            "        case 'p':",
            "            ",
            "            break",
            "    }",
            "})"
        ],
        "description": "keydown"
    },
    "flex": {
        "prefix": "flex",
        "body": [
            "display: 'flex', justifyContent: 'center', alignItems: 'center',"
        ],
        "description": "flex Power"
    },
    "fixed": {
        "prefix": "fixed",
        "body": [
            "position: 'fixed', top: '0', left: '0',",
            "width: '100%', height: '100%',",
            "$0"
        ],
        "description": "fixed 100%"
    },
    "jsonParse": {
        "prefix": "jsonParse",
        "body": [
            "let o",
            "try {",
            "    o = JSON.parse($0)",
            "} catch (e) { console.warn(e); return }"
        ],
        "description": "json parse try catch"
    },
    "checkArray": {
        "prefix": "checkArray",
        "body": [
            "if (!($1.length >= 0)) return",
            "for (let i = 0; i < $1.length; i++) {",
            "    if ($0) return",
            "}",
        ],
        "description": "check Array integrity"
    },
    "forin": {
        "prefix": "forin",
        "body": [
            "for (const key in $1) {",
            "    const $2 = $1[key]",
            "    $3",
            "}",
        ],
        "description": "for in"
    },
    "type": {
        "prefix": "type",
        "body": [
            "/** @type {$1} */ ${1/(.*)/${1:/downcase}/}$0,",
        ],
        "description": "type"
    },
}